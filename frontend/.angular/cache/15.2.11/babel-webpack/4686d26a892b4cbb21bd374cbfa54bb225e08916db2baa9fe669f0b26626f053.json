{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let WebsocketService = /*#__PURE__*/(() => {\n  class WebsocketService {\n    constructor() {\n      this.messageSubject = new Subject();\n      this.isConnected = false; // Add a status property\n    }\n\n    connect(url) {\n      if (this.websocket && (this.websocket.readyState === WebSocket.OPEN || this.websocket.readyState === WebSocket.CONNECTING)) {\n        console.log('WebSocket already connected or connecting.');\n        return;\n      }\n      this.websocket = new WebSocket(url);\n      this.websocket.onopen = event => {\n        console.log('WebSocket connection opened:', event);\n        this.isConnected = true;\n        // You might want to emit a connected status here or use the subject\n        this.messageSubject.next({\n          type: 'status',\n          connected: true\n        });\n      };\n      this.websocket.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          this.messageSubject.next(data); // Emit received data\n        } catch (e) {\n          console.error('Failed to parse WebSocket message:', e, event.data);\n        }\n      };\n      this.websocket.onclose = event => {\n        console.log('WebSocket connection closed:', event);\n        this.isConnected = false;\n        this.messageSubject.next({\n          type: 'status',\n          connected: false\n        });\n        this.websocket = undefined; // Clear for potential reconnection\n        // Implement reconnection logic here if desired\n      };\n\n      this.websocket.onerror = event => {\n        console.error('WebSocket error:', event);\n        this.isConnected = false;\n        this.messageSubject.next({\n          type: 'status',\n          connected: false,\n          error: event\n        });\n        // Handle error, maybe attempt to reconnect\n      };\n    }\n\n    sendMessage(message) {\n      if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n        this.websocket.send(JSON.stringify(message));\n      } else {\n        console.warn('WebSocket not connected or not open. Message not sent:', message);\n        // Optionally, queue messages or attempt to reconnect and resend\n      }\n    }\n\n    getMessages() {\n      return this.messageSubject.asObservable();\n    }\n    // Optional: filter messages by type if your backend sends different message types\n    getMessagesByType(type) {\n      return this.messageSubject.asObservable().pipe(filter(msg => msg.type === type), map(msg => msg.data) // Assuming 'data' field holds the actual payload\n      );\n    }\n\n    close() {\n      if (this.websocket) {\n        console.log('Closing WebSocket connection...');\n        this.websocket.close(1000, \"Component shutting down\"); // 1000 is normal closure\n        this.websocket = undefined;\n        this.isConnected = false;\n      }\n    }\n  }\n  WebsocketService.ɵfac = function WebsocketService_Factory(t) {\n    return new (t || WebsocketService)();\n  };\n  WebsocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebsocketService,\n    factory: WebsocketService.ɵfac,\n    providedIn: 'root'\n  });\n  return WebsocketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}