{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/websocket.service\";\nimport * as i3 from \"@angular/common\";\nfunction AddTransactionComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1, \" Description is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Amount is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Amount must be positive.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Invalid amount format (e.g., 100.00, up to two decimal places).\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, AddTransactionComponent_div_13_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(2, AddTransactionComponent_div_13_span_2_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(3, AddTransactionComponent_div_13_span_3_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_0_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]) && (((tmp_0_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_0_0.touched) || ((tmp_0_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_0_0.dirty)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"min\"]) && (((tmp_1_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_1_0.touched) || ((tmp_1_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_1_0.dirty)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"pattern\"]) && (((tmp_2_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_2_0.touched) || ((tmp_2_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_2_0.dirty)));\n  }\n}\nfunction AddTransactionComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"error-message\", ctx_r2.submissionError)(\"success-message\", !ctx_r2.submissionError);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.submissionMessage, \" \");\n  }\n}\nfunction AddTransactionComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" WebSocket not connected. Please check your backend server. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let AddTransactionComponent = /*#__PURE__*/(() => {\n  class AddTransactionComponent {\n    constructor(fb, websocketService) {\n      this.fb = fb;\n      this.websocketService = websocketService;\n      this.websocketConnected = false;\n      this.submissionMessage = '';\n      this.submissionError = false;\n      this.transactionForm = this.fb.group({\n        description: ['', Validators.required],\n        amount: ['', [Validators.required, Validators.min(0.01), Validators.pattern(/^\\d+(\\.\\d{1,2})?$/)]] // Amount must be positive and up to 2 decimal places\n      });\n    }\n\n    ngOnInit() {\n      // Subscribe to WebSocket connection status updates\n      // This helps in displaying feedback to the user\n      this.wsStatusSubscription = this.websocketService.getMessages().subscribe(message => {\n        if (message.type === 'status') {\n          this.websocketConnected = message.connected;\n          if (!this.websocketConnected) {\n            this.submissionMessage = 'WebSocket not connected. Transactions might not be sent.';\n            this.submissionError = true;\n          } else {\n            this.submissionMessage = ''; // Clear status message on connect\n            this.submissionError = false;\n          }\n        }\n        // You could also listen for specific backend confirmations here if your backend sends them\n        // if (message.type === 'transaction_added_confirmation' && message.data.id) {\n        //   this.submissionMessage = `Transaction \"${message.data.description}\" added successfully!`;\n        //   this.submissionError = false;\n        //   this.transactionForm.reset();\n        // }\n      });\n      // Ensure WebSocket is connected when the component initializes\n      // The `connect` method is idempotent (won't reconnect if already open/connecting)\n      // Make sure the URL here matches your backend routing!\n      const websocketUrl = 'ws://localhost:8000/ws/transactions/';\n      this.websocketService.connect(websocketUrl);\n    }\n    onSubmit() {\n      this.submissionMessage = ''; // Clear previous messages\n      this.submissionError = false;\n      if (this.transactionForm.valid) {\n        if (!this.websocketService.isConnected) {\n          this.submissionMessage = 'WebSocket not connected. Please wait or check your connection.';\n          this.submissionError = true;\n          return;\n        }\n        const {\n          description,\n          amount\n        } = this.transactionForm.value;\n        const transactionPayload = {\n          type: 'new_transaction',\n          data: {\n            description: description,\n            amount: parseFloat(amount) // Ensure amount is a number\n          }\n        };\n\n        try {\n          this.websocketService.sendMessage(transactionPayload);\n          this.submissionMessage = 'Transaction sent via WebSocket!';\n          this.submissionError = false;\n          this.transactionForm.reset(); // Clear the form after sending\n          // Mark fields as untouched to clear validation messages after reset\n          Object.keys(this.transactionForm.controls).forEach(key => {\n            this.transactionForm.controls[key].setErrors(null);\n            this.transactionForm.controls[key].markAsUntouched();\n          });\n        } catch (error) {\n          console.error('Error sending transaction:', error);\n          this.submissionMessage = 'Failed to send transaction. Check console for details.';\n          this.submissionError = true;\n        }\n      } else {\n        this.submissionMessage = 'Please fill out all fields correctly.';\n        this.submissionError = true;\n        // Mark all fields as touched to display validation messages\n        this.markFormGroupTouched(this.transactionForm);\n      }\n    }\n    // Helper to mark all form fields as touched\n    markFormGroupTouched(formGroup) {\n      Object.values(formGroup.controls).forEach(control => {\n        control.markAsTouched();\n        if (control.controls) {\n          this.markFormGroupTouched(control);\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.wsStatusSubscription) {\n        this.wsStatusSubscription.unsubscribe();\n      }\n      // It's generally good practice to close the WebSocket if this is the last component using it\n      // Or, if other components use it, manage connection lifecycle in the service itself.\n      // For this example, we'll let the service handle its own lifecycle for simplicity,\n      // assuming it might be shared across components.\n      // If this component were the *only* one initiating/managing the connection, you'd call close() here.\n    }\n  }\n\n  AddTransactionComponent.ɵfac = function AddTransactionComponent_Factory(t) {\n    return new (t || AddTransactionComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.WebsocketService));\n  };\n  AddTransactionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddTransactionComponent,\n    selectors: [[\"app-add-transaction\"]],\n    decls: 18,\n    vars: 10,\n    consts: [[1, \"add-transaction-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"description\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", \"placeholder\", \"e.g., Groceries, Salary, Rent\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"amount\"], [\"id\", \"amount\", \"type\", \"number\", \"formControlName\", \"amount\", \"placeholder\", \"e.g., 50.25, 1200.00\", \"step\", \"0.01\"], [\"type\", \"submit\", 3, \"disabled\"], [\"class\", \"submission-feedback\", 4, \"ngIf\"], [\"class\", \"websocket-status error-message\", 4, \"ngIf\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"submission-feedback\"], [1, \"websocket-status\", \"error-message\"]],\n    template: function AddTransactionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Add New Transaction\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function AddTransactionComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Description:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, AddTransactionComponent_div_8_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 6);\n        i0.ɵɵtext(11, \"Amount:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵtemplate(13, AddTransactionComponent_div_13_Template, 4, 3, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 8);\n        i0.ɵɵtext(15, \" Add Transaction \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(16, AddTransactionComponent_div_16_Template, 3, 5, \"div\", 9);\n        i0.ɵɵtemplate(17, AddTransactionComponent_div_17_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_4_0;\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.transactionForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"is-invalid\", ((tmp_1_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_1_0.touched) || ((tmp_1_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_1_0.dirty)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_2_0.invalid) && (((tmp_2_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_2_0.touched) || ((tmp_2_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_2_0.dirty)));\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"is-invalid\", ((tmp_3_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_3_0.invalid) && (((tmp_3_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_3_0.touched) || ((tmp_3_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_3_0.dirty)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_4_0.invalid) && (((tmp_4_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_4_0.touched) || ((tmp_4_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_4_0.dirty)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.transactionForm.valid || !ctx.websocketConnected);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.submissionMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.websocketConnected);\n      }\n    },\n    dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".add-transaction-container[_ngcontent-%COMP%]{padding:25px;max-width:400px;margin:20px auto;border:1px solid #444;border-radius:12px;box-shadow:0 4px 20px #0000004d,inset 0 1px #ffffff1a;background:radial-gradient(circle at 20% 80%,rgba(41,98,255,.1) 0%,transparent 50%),radial-gradient(circle at 80% 20%,rgba(156,39,176,.1) 0%,transparent 50%),linear-gradient(135deg,#1a1a2e 0%,#16213e 50%,#0f3460 100%);font-family:Segoe UI,Tahoma,Geneva,Verdana,sans-serif;position:relative;overflow:hidden}.add-transaction-container[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;top:0;left:0;right:0;height:1px;background:linear-gradient(90deg,transparent 0%,rgba(100,149,237,.6) 50%,transparent 100%)}h2[_ngcontent-%COMP%]{text-align:center;color:#e0e0e0;margin-bottom:25px;font-weight:600;text-shadow:0 2px 4px rgba(0,0,0,.5);position:relative}h2[_ngcontent-%COMP%]:after{content:\\\"\\\";position:absolute;bottom:-8px;left:50%;transform:translate(-50%);width:60px;height:2px;background:linear-gradient(90deg,transparent,#4fc3f7,transparent)}.form-group[_ngcontent-%COMP%]{margin-bottom:20px;position:relative}label[_ngcontent-%COMP%]{display:block;margin-bottom:8px;font-weight:600;color:#b0b0b0;text-shadow:0 1px 2px rgba(0,0,0,.3)}input[type=text][_ngcontent-%COMP%], input[type=number][_ngcontent-%COMP%]{width:calc(100% - 24px);padding:12px;border:1px solid rgba(255,255,255,.2);border-radius:6px;font-size:16px;box-sizing:border-box;transition:all .3s ease;background:rgba(255,255,255,.1);color:#e0e0e0;backdrop-filter:blur(10px)}input[type=text][_ngcontent-%COMP%]::placeholder, input[type=number][_ngcontent-%COMP%]::placeholder{color:#9e9e9e}input[type=text][_ngcontent-%COMP%]:focus, input[type=number][_ngcontent-%COMP%]:focus{border-color:#4fc3f7;outline:none;box-shadow:0 0 0 .2rem #4fc3f740,inset 0 2px 4px #0000001a;background:rgba(255,255,255,.15);transform:translateY(-1px)}input.is-invalid[_ngcontent-%COMP%]{border-color:#ff5252;background:rgba(244,67,54,.1)}input.is-invalid[_ngcontent-%COMP%]:focus{box-shadow:0 0 0 .2rem #f4433640,inset 0 2px 4px #0000001a;border-color:#ff5252}.invalid-feedback[_ngcontent-%COMP%]{color:#ff8a80;font-size:.875em;margin-top:6px;text-shadow:0 1px 2px rgba(0,0,0,.3);font-weight:500}button[_ngcontent-%COMP%]{width:100%;padding:14px 15px;background:linear-gradient(135deg,#4fc3f7 0%,#2979ff 100%);color:#fff;border:none;border-radius:6px;font-size:18px;font-weight:600;cursor:pointer;transition:all .3s ease;margin-top:15px;text-shadow:0 1px 2px rgba(0,0,0,.3);box-shadow:0 4px 15px #2979ff4d,inset 0 1px #fff3;position:relative;overflow:hidden}button[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;top:0;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,.2),transparent);transition:left .5s ease}button[_ngcontent-%COMP%]:hover:enabled:before{left:100%}button[_ngcontent-%COMP%]:disabled{background:linear-gradient(135deg,#666 0%,#444 100%);cursor:not-allowed;transform:none;box-shadow:none}button[_ngcontent-%COMP%]:hover:enabled{background:linear-gradient(135deg,#29b6f6 0%,#2962ff 100%);transform:translateY(-2px);box-shadow:0 6px 20px #2979ff66,inset 0 1px #fff3}button[_ngcontent-%COMP%]:active:enabled{transform:translateY(0);background:linear-gradient(135deg,#039be5 0%,#0039cb 100%);box-shadow:0 2px 10px #2979ff4d,inset 0 1px #ffffff1a}.submission-feedback[_ngcontent-%COMP%]{margin-top:20px;padding:12px;border-radius:6px;text-align:center;backdrop-filter:blur(10px);border:1px solid rgba(255,255,255,.1);box-shadow:0 2px 8px #0003}.submission-feedback[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-weight:700;text-shadow:0 1px 2px rgba(0,0,0,.3)}.success-message[_ngcontent-%COMP%]{background:linear-gradient(135deg,rgba(76,175,80,.2) 0%,rgba(56,142,60,.15) 100%);color:#69f0ae;border:1px solid rgba(76,175,80,.3)}.error-message[_ngcontent-%COMP%]{background:linear-gradient(135deg,rgba(244,67,54,.2) 0%,rgba(211,47,47,.15) 100%);color:#ff8a80;border:1px solid rgba(244,67,54,.3)}.websocket-status[_ngcontent-%COMP%]{margin-top:15px;padding:10px;text-align:center;border-radius:6px;font-size:.9em;background:rgba(255,255,255,.05);border:1px solid rgba(255,255,255,.1);color:#b0b0b0;text-shadow:0 1px 2px rgba(0,0,0,.3)}.add-transaction-container[_ngcontent-%COMP%]:after{content:\\\"\\\";position:absolute;inset:0;background-image:radial-gradient(circle at 25% 25%,rgba(255,255,255,.05) 1px,transparent 1px),radial-gradient(circle at 75% 75%,rgba(255,255,255,.03) 1px,transparent 1px);background-size:30px 30px,20px 20px;pointer-events:none;z-index:0}.add-transaction-container[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{position:relative;z-index:1}.form-group[_ngcontent-%COMP%]:hover   label[_ngcontent-%COMP%]{color:#e0e0e0;transition:color .3s ease}\"]\n  });\n  return AddTransactionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}