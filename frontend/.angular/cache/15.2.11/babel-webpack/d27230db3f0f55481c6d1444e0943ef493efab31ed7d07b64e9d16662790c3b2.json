{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/websocket.service\";\nimport * as i3 from \"@angular/common\";\nfunction AddTransactionComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1, \" Description is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Amount is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Amount must be positive.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Invalid amount format (e.g., 100.00, up to two decimal places).\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTransactionComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, AddTransactionComponent_div_13_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(2, AddTransactionComponent_div_13_span_2_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(3, AddTransactionComponent_div_13_span_3_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_0_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]) && (((tmp_0_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_0_0.touched) || ((tmp_0_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_0_0.dirty)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"min\"]) && (((tmp_1_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_1_0.touched) || ((tmp_1_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_1_0.dirty)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"pattern\"]) && (((tmp_2_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_2_0.touched) || ((tmp_2_0 = ctx_r1.transactionForm.get(\"amount\")) == null ? null : tmp_2_0.dirty)));\n  }\n}\nfunction AddTransactionComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"error-message\", ctx_r2.submissionError)(\"success-message\", !ctx_r2.submissionError);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.submissionMessage, \" \");\n  }\n}\nfunction AddTransactionComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" WebSocket not connected. Please check your backend server. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let AddTransactionComponent = /*#__PURE__*/(() => {\n  class AddTransactionComponent {\n    constructor(fb, websocketService) {\n      this.fb = fb;\n      this.websocketService = websocketService;\n      this.websocketConnected = false;\n      this.submissionMessage = '';\n      this.submissionError = false;\n      this.transactionForm = this.fb.group({\n        description: ['', Validators.required],\n        amount: ['', [Validators.required, Validators.min(0.01), Validators.pattern(/^\\d+(\\.\\d{1,2})?$/)]] // Amount must be positive and up to 2 decimal places\n      });\n    }\n\n    ngOnInit() {\n      // Subscribe to WebSocket connection status updates\n      // This helps in displaying feedback to the user\n      this.wsStatusSubscription = this.websocketService.getMessages().subscribe(message => {\n        if (message.type === 'status') {\n          this.websocketConnected = message.connected;\n          if (!this.websocketConnected) {\n            this.submissionMessage = 'WebSocket not connected. Transactions might not be sent.';\n            this.submissionError = true;\n          } else {\n            this.submissionMessage = ''; // Clear status message on connect\n            this.submissionError = false;\n          }\n        }\n        // You could also listen for specific backend confirmations here if your backend sends them\n        // if (message.type === 'transaction_added_confirmation' && message.data.id) {\n        //   this.submissionMessage = `Transaction \"${message.data.description}\" added successfully!`;\n        //   this.submissionError = false;\n        //   this.transactionForm.reset();\n        // }\n      });\n      // Ensure WebSocket is connected when the component initializes\n      // The `connect` method is idempotent (won't reconnect if already open/connecting)\n      // Make sure the URL here matches your backend routing!\n      const websocketUrl = 'ws://localhost:8000/ws/transactions/';\n      this.websocketService.connect(websocketUrl);\n    }\n    onSubmit() {\n      this.submissionMessage = ''; // Clear previous messages\n      this.submissionError = false;\n      if (this.transactionForm.valid) {\n        if (!this.websocketService.isConnected) {\n          this.submissionMessage = 'WebSocket not connected. Please wait or check your connection.';\n          this.submissionError = true;\n          return;\n        }\n        const {\n          description,\n          amount\n        } = this.transactionForm.value;\n        const transactionPayload = {\n          type: 'new_transaction',\n          data: {\n            description: description,\n            amount: parseFloat(amount) // Ensure amount is a number\n          }\n        };\n\n        try {\n          this.websocketService.sendMessage(transactionPayload);\n          this.submissionMessage = 'Transaction sent via WebSocket!';\n          this.submissionError = false;\n          this.transactionForm.reset(); // Clear the form after sending\n          // Mark fields as untouched to clear validation messages after reset\n          Object.keys(this.transactionForm.controls).forEach(key => {\n            this.transactionForm.controls[key].setErrors(null);\n            this.transactionForm.controls[key].markAsUntouched();\n          });\n        } catch (error) {\n          console.error('Error sending transaction:', error);\n          this.submissionMessage = 'Failed to send transaction. Check console for details.';\n          this.submissionError = true;\n        }\n      } else {\n        this.submissionMessage = 'Please fill out all fields correctly.';\n        this.submissionError = true;\n        // Mark all fields as touched to display validation messages\n        this.markFormGroupTouched(this.transactionForm);\n      }\n    }\n    // Helper to mark all form fields as touched\n    markFormGroupTouched(formGroup) {\n      Object.values(formGroup.controls).forEach(control => {\n        control.markAsTouched();\n        if (control.controls) {\n          this.markFormGroupTouched(control);\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.wsStatusSubscription) {\n        this.wsStatusSubscription.unsubscribe();\n      }\n      // It's generally good practice to close the WebSocket if this is the last component using it\n      // Or, if other components use it, manage connection lifecycle in the service itself.\n      // For this example, we'll let the service handle its own lifecycle for simplicity,\n      // assuming it might be shared across components.\n      // If this component were the *only* one initiating/managing the connection, you'd call close() here.\n    }\n  }\n\n  AddTransactionComponent.ɵfac = function AddTransactionComponent_Factory(t) {\n    return new (t || AddTransactionComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.WebsocketService));\n  };\n  AddTransactionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddTransactionComponent,\n    selectors: [[\"app-add-transaction\"]],\n    decls: 18,\n    vars: 10,\n    consts: [[1, \"add-transaction-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"description\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", \"placeholder\", \"e.g., Groceries, Salary, Rent\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"amount\"], [\"id\", \"amount\", \"type\", \"number\", \"formControlName\", \"amount\", \"placeholder\", \"e.g., 50.25, 1200.00\", \"step\", \"0.01\"], [\"type\", \"submit\", 3, \"disabled\"], [\"class\", \"submission-feedback\", 4, \"ngIf\"], [\"class\", \"websocket-status error-message\", 4, \"ngIf\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"submission-feedback\"], [1, \"websocket-status\", \"error-message\"]],\n    template: function AddTransactionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Add New Transaction\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function AddTransactionComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Description:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, AddTransactionComponent_div_8_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 6);\n        i0.ɵɵtext(11, \"Amount:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵtemplate(13, AddTransactionComponent_div_13_Template, 4, 3, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 8);\n        i0.ɵɵtext(15, \" Add Transaction \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(16, AddTransactionComponent_div_16_Template, 3, 5, \"div\", 9);\n        i0.ɵɵtemplate(17, AddTransactionComponent_div_17_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_4_0;\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.transactionForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"is-invalid\", ((tmp_1_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_1_0.touched) || ((tmp_1_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_1_0.dirty)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_2_0.invalid) && (((tmp_2_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_2_0.touched) || ((tmp_2_0 = ctx.transactionForm.get(\"description\")) == null ? null : tmp_2_0.dirty)));\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"is-invalid\", ((tmp_3_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_3_0.invalid) && (((tmp_3_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_3_0.touched) || ((tmp_3_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_3_0.dirty)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_4_0.invalid) && (((tmp_4_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_4_0.touched) || ((tmp_4_0 = ctx.transactionForm.get(\"amount\")) == null ? null : tmp_4_0.dirty)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.transactionForm.valid || !ctx.websocketConnected);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.submissionMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.websocketConnected);\n      }\n    },\n    dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".add-transaction-container[_ngcontent-%COMP%]{padding:20px;max-width:400px;margin:20px auto;border:1px solid #ddd;border-radius:8px;box-shadow:0 2px 4px #0000001a;background-color:#fff;font-family:Arial,sans-serif}h2[_ngcontent-%COMP%]{text-align:center;color:#333;margin-bottom:25px}.form-group[_ngcontent-%COMP%]{margin-bottom:15px}label[_ngcontent-%COMP%]{display:block;margin-bottom:5px;font-weight:700;color:#555}input[type=text][_ngcontent-%COMP%], input[type=number][_ngcontent-%COMP%]{width:calc(100% - 22px);padding:10px;border:1px solid #ccc;border-radius:4px;font-size:16px;box-sizing:border-box;transition:border-color .2s ease-in-out}input[type=text][_ngcontent-%COMP%]:focus, input[type=number][_ngcontent-%COMP%]:focus{border-color:#007bff;outline:none;box-shadow:0 0 0 .2rem #007bff40}input.is-invalid[_ngcontent-%COMP%]{border-color:#dc3545}input.is-invalid[_ngcontent-%COMP%]:focus{box-shadow:0 0 0 .2rem #dc354540}.invalid-feedback[_ngcontent-%COMP%]{color:#dc3545;font-size:.875em;margin-top:5px}button[_ngcontent-%COMP%]{width:100%;padding:12px 15px;background-color:#007bff;color:#fff;border:none;border-radius:4px;font-size:18px;cursor:pointer;transition:background-color .2s ease,transform .1s ease;margin-top:10px}button[_ngcontent-%COMP%]:disabled{background-color:#ccc;cursor:not-allowed;transform:none}button[_ngcontent-%COMP%]:hover:enabled{background-color:#0056b3;transform:translateY(-1px)}button[_ngcontent-%COMP%]:active:enabled{transform:translateY(0);background-color:#004085}.submission-feedback[_ngcontent-%COMP%]{margin-top:20px;padding:10px;border-radius:4px;text-align:center}.submission-feedback[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-weight:700}.success-message[_ngcontent-%COMP%]{background-color:#d4edda;color:#155724;border:1px solid #c3e6cb}.error-message[_ngcontent-%COMP%]{background-color:#f8d7da;color:#721c24;border:1px solid #f5c6cb}.websocket-status[_ngcontent-%COMP%]{margin-top:15px;padding:10px;text-align:center;border-radius:4px;font-size:.9em}\"]\n  });\n  return AddTransactionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}