{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nimport * as i2 from \"@angular/common\";\nfunction TransactionListComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nfunction TransactionListComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1, \" Connecting to WebSocket... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransactionListComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \" No transactions yet. Add some! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransactionListComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 9)(1, \"div\", 10)(2, \"span\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 12);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 13);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const transaction_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(transaction_r4.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"$\", i0.ɵɵpipeBind2(6, 3, transaction_r4.amount, \"1.2-2\"), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" (\", ctx_r3.getTimeDifference(transaction_r4.timestamp), \") \");\n  }\n}\nexport let TransactionListComponent = /*#__PURE__*/(() => {\n  class TransactionListComponent {\n    constructor(websocketService) {\n      this.websocketService = websocketService;\n      this.transactions = []; // Array to hold the list of transactions\n      this.websocketConnected = false;\n      this.errorMessage = '';\n    }\n    ngOnInit() {\n      // 1. Establish WebSocket connection (if not already connected by another component)\n      // The `connect` method is idempotent, so calling it multiple times is safe.\n      const websocketUrl = 'ws://localhost:8000/ws/transactions/';\n      this.websocketService.connect(websocketUrl);\n      // 2. Subscribe to incoming WebSocket messages\n      this.websocketSubscription = this.websocketService.getMessages().subscribe(message => {\n        // Handle connection status messages\n        if (message.type === 'status') {\n          this.websocketConnected = message.connected;\n          this.errorMessage = message.error ? 'WebSocket error: ' + message.error : '';\n          if (!this.websocketConnected) {\n            this.errorMessage = 'WebSocket disconnected. Please check backend server.';\n          } else {\n            this.errorMessage = ''; // Clear error on successful connect\n          }\n        }\n        // Handle incoming new transaction messages from the backend\n        else if (message.type === 'transaction_added_confirmation') {\n          // Match the 'type' your backend sends\n          const wsMessage = message; // Cast to your expected type\n          const newTransaction = {\n            description: wsMessage.data.description,\n            amount: wsMessage.data.amount,\n            timestamp: new Date() // Add a timestamp for 'Just now' display\n          };\n\n          this.transactions.push(newTransaction);\n          this.transactions.sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0)); // Sort by newest first\n          console.log('New transaction added:', newTransaction);\n        }\n        // Handle any other message types if needed\n        else {\n          console.log('Received unhandled WebSocket message:', message);\n        }\n      }, error => {\n        console.error('WebSocket subscription error:', error);\n        this.errorMessage = 'WebSocket connection error.';\n        this.websocketConnected = false;\n      }, () => {\n        console.log('WebSocket subscription completed.');\n        this.websocketConnected = false;\n        this.errorMessage = 'WebSocket connection closed.';\n      });\n    }\n    // Helper function to format the timestamp\n    getTimeDifference(timestamp) {\n      if (!timestamp) {\n        return '';\n      }\n      const now = new Date();\n      const seconds = Math.floor((now.getTime() - timestamp.getTime()) / 1000);\n      if (seconds < 60) {\n        return 'Just now';\n      } else if (seconds < 3600) {\n        const minutes = Math.floor(seconds / 60);\n        return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n      } else if (seconds < 86400) {\n        const hours = Math.floor(seconds / 3600);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else {\n        const days = Math.floor(seconds / 86400);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      }\n    }\n    ngOnDestroy() {\n      if (this.websocketSubscription) {\n        this.websocketSubscription.unsubscribe();\n      }\n      // Decide if you want to close the WebSocket connection here or let the service manage it\n      // If other components might use it, let the service manage. If this is the only one, close it.\n      // this.websocketService.close();\n    }\n  }\n\n  TransactionListComponent.ɵfac = function TransactionListComponent_Factory(t) {\n    return new (t || TransactionListComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n  };\n  TransactionListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TransactionListComponent,\n    selectors: [[\"app-transaction-list\"]],\n    decls: 8,\n    vars: 4,\n    consts: [[1, \"transaction-list-container\"], [\"class\", \"error-message-banner\", 4, \"ngIf\"], [\"class\", \"warning-message-banner\", 4, \"ngIf\"], [\"class\", \"no-transactions\", 4, \"ngIf\"], [1, \"transaction-items\"], [\"class\", \"transaction-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"error-message-banner\"], [1, \"warning-message-banner\"], [1, \"no-transactions\"], [1, \"transaction-item\"], [1, \"transaction-details\"], [1, \"transaction-description\"], [1, \"transaction-amount\"], [1, \"transaction-timestamp\"]],\n    template: function TransactionListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Transaction List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, TransactionListComponent_div_3_Template, 2, 1, \"div\", 1);\n        i0.ɵɵtemplate(4, TransactionListComponent_div_4_Template, 2, 0, \"div\", 2);\n        i0.ɵɵtemplate(5, TransactionListComponent_div_5_Template, 2, 0, \"div\", 3);\n        i0.ɵɵelementStart(6, \"ul\", 4);\n        i0.ɵɵtemplate(7, TransactionListComponent_li_7_Template, 9, 6, \"li\", 5);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.websocketConnected && !ctx.errorMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.transactions.length === 0 && ctx.websocketConnected);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.transactions);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.DecimalPipe],\n    styles: [\".transaction-list-container[_ngcontent-%COMP%]{padding:20px;max-width:600px;margin:20px auto;border:1px solid #ddd;border-radius:8px;box-shadow:0 2px 4px #0000001a;background-color:#fff;font-family:Arial,sans-serif}h2[_ngcontent-%COMP%]{text-align:center;color:#333;margin-bottom:25px}.error-message-banner[_ngcontent-%COMP%], .warning-message-banner[_ngcontent-%COMP%]{padding:10px;border-radius:4px;text-align:center;margin-bottom:15px;font-weight:700}.error-message-banner[_ngcontent-%COMP%]{background-color:#f8d7da;color:#721c24;border:1px solid #f5c6cb}.warning-message-banner[_ngcontent-%COMP%]{background-color:#fff3cd;color:#856404;border:1px solid #ffeeba}.no-transactions[_ngcontent-%COMP%]{text-align:center;color:#777;font-style:italic;padding:20px;border:1px dashed #eee;border-radius:4px;margin-top:20px}.transaction-items[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}.transaction-item[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;padding:12px 0;border-bottom:1px solid #eee}.transaction-item[_ngcontent-%COMP%]:last-child{border-bottom:none}.transaction-details[_ngcontent-%COMP%]{display:flex;flex-direction:column}.transaction-description[_ngcontent-%COMP%]{font-weight:700;color:#333;font-size:1.1em}.transaction-amount[_ngcontent-%COMP%]{color:#007bff;font-size:1em;font-weight:700;margin-top:4px}.transaction-timestamp[_ngcontent-%COMP%]{color:#888;font-size:.85em;font-style:italic}\"]\n  });\n  return TransactionListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}